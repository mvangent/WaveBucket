@model Senken.Models.Session

@{
    ViewBag.Title = "Create";
}
<style type="text/css">.senkenContainer { }</style>

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Session</h4>

        <input type="button" id="playButton" value="Activate">
        <input type="button" id="stopButton" value="Pauze">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })




        <div class="senkenContainer">


            <!---LEFT COLUMN-->

            <div id="senkenLeftColumn">

                <!---Oscillator-->

                <div class="form-group">
                    @Html.LabelFor(model => model.OscIFrequency, "OscIFrequency", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.OscIFrequency, new { type = "number", id = "sineFreq", name = "frequency", min = "1", max = "20000", step = "1"  })
                        @Html.ValidationMessageFor(model => model.OscIFrequency, "", new { @class = "text-danger" })
                    </div>
                </div>

                <input type="button" id="sineButton" name="sineGen" value="stack Oscillation">
                <input type="button" id="sineStopButton" name="sineStop" value="remove Last Oscillation">
                
                <div class="form-group">
                    @Html.LabelFor(model => model.OscIType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.OscIType, htmlAttributes: new { id = "oscIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OscIType, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <!-- Visualiser-->
                
                <br>
                <canvas id="oscIVisualiser" width="500" height="100"></canvas>
                <br>

                <!---LFO -->

                <div class="form-group">
                    @Html.LabelFor(model => model.LFOIFrequency, "LFO I: frequency", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.LFOIFrequency, new { type = "number", id = "LFOFreq", name = "lfoFrequency", min = "1", max = "200", step = "1" })
                        @Html.ValidationMessageFor(model => model.LFOIFrequency, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LFOIScale, "scale", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.LFOIScale, new { type = "number", id = "LFOScale", name = "lfoScale", min = "1", max = "10", step = "1", value = "1" })
                        @Html.ValidationMessageFor(model => model.LFOIScale, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br>
                
                <input type="button" id="LFOButton" name="LFOGen" value="activate LFO">
                <input type="button" id="LFOStopButton" name="LFOStop" value="deactivate LFO">

                <div class="form-group">
                    @Html.LabelFor(model => model.LFOIType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.LFOIType, htmlAttributes: new { id = "lfoIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LFOIType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!---Compressor-->

                <div class="form-group">
                    @Html.LabelFor(model => model.CompressorRatio, "Compressor: ratio", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.CompressorRatio, new { type = "number", id = "compRatio", name = "compressorRatio", min = "1", max = "20", step = "1", value = "12", size = 2, maxlength = 2 })
                        @Html.ValidationMessageFor(model => model.CompressorRatio, "", new { @class = "text-danger" })
                    </div>
                </div>



               

                <div class="form-group">
                    @Html.LabelFor(model => model.CompressorKnee, "knee: ", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.CompressorKnee, new { type = "number", id = "compKnee", name = "compressorKnee", min = "0", max = "40", step = "1", value = "30", size = "2", maxlength = "2" })
                        @Html.ValidationMessageFor(model => model.CompressorKnee, "", new { @class = "text-danger" })
                    </div>
                </div>



              

                <div class="form-group">
                    @Html.LabelFor(model => model.CompressorThreshold, "threshold: ", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.CompressorThreshold, new { type = "number", id = "compThreshold", name = "compressorThreshold", min = "-100", max = "0", step = "1", value = "-23", size = "3", maxlength = "3" })
                        @Html.ValidationMessageFor(model => model.CompressorThreshold, "", new { @class = "text-danger" })
                    </div>
                </div>


              

                <br>

                <!---MasterGain-->

                <div class="form-group">
                    @Html.LabelFor(model => model.MasterGain, "Master gain: ", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.MasterGain, new { type = "number", id = "masterGain", name = "masterGainField", min = "0", max = "100", step = "1", value = "50", size = "3", maxlength = "3" })
                        @Html.ValidationMessageFor(model => model.MasterGain, "", new { @class = "text-danger" })
                    </div>
                </div>




                <!---SaveButton-->




                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>

            </div>


            <!---RIGHT COLUMN-->


            <div id="senkenRightColumn">

                <!---ArtistAlias-->

                <div class="form-group">
                    @Html.LabelFor(model => model.ArtistAlias, "Artist Alias", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.ArtistAlias, new { type = "text", id = "artistAlias" })
                        @Html.ValidationMessageFor(model => model.ArtistAlias, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />

                
                <!---Title-->

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, "Title", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.Title, new { type = "text", id = "sessiontitle" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />

          

                <!---Rating-->

                <div class="form-group">
                    @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Rating, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />
                
                <!---FilterI -->

                <div class="form-group">
                    @Html.LabelFor(model => model.BiquadFilterTypeOne, "Filter I", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.BiquadFilterTypeOne, htmlAttributes: new { id = "filterTypeOne", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterTypeOne, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.BiquadFilterFrequencyOne, "frequency", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.BiquadFilterFrequencyOne, new { type = "number", id = "filterFrequencyOne",  min = "10", max = "22000", step = "1", value = "3" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterFrequencyOne, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BiquadFilterQOne, "Q", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.BiquadFilterQOne, new { type = "number", id = "filterQOne", min = "1", max = "1000", step = "1", value = "1" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterQOne, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LFOIScale, "gain", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.BiquadFilterGainOne, new { type = "number", id = "filterGainOne", min = "-40", max = "40", step = "1", value = "1" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterGainOne, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br>



                <!---WaveBucket-->

                <div class="form-group">
                    @Html.LabelFor(model => model.WaveBucket, "WaveBucket", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div id="wavebucket">
                        <ul id="bucketlist">
                            <li>*-- empty --#</li>
                        </ul>
                    </div>


                </div>



            </div>
        </div>


    </div>
}




@section Scripts {

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>


<script type="text/javascript" src="~/Scripts/app/senkenBiquadFilter.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenCompressor.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenMasterController.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenVisualAnalyser.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenWaveBucket.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenOscillator.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenSynth.js"></script>

<script type="text/javascript" src="~/Scripts/app/hub.js">
    
    </script>
