@model Senken.Models.Session

@{
    ViewBag.Title = "Session";
}

@Html.HiddenFor(model => model.SessionID, "SessionID")
@Html.HiddenFor(model => model.UserIsOwner, "UserIsOwner")
@Html.HiddenFor(model => model.OpenToEvolution, "OpenToEvolution")

<h2>@ViewBag.Title.</h2>

<h4>Communal Sound Designer</h4>
<hr />



@using (Html.BeginForm()) 
{ 
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        <!---SaveButton & CopyButton-->
        @if (Model.UserIsOwner && !Model.OpenToEvolution)
        {

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    
                    <input type="button" id="OnOffButton" value="Controller" />
                    
                    <input type="submit" id="SaveButton" value="Save & Quit" class="btn btn-default" />

                    <a href="~/Home/About">
                        <input type="button" id="QuitButton" value="Quit" />

                        <a href="~/Session/Index">
                            <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
                        </a>
                    </a>

                    <!---Title-->

                    <span class="senkenDescriptions">Title: </span>
                    @Html.TextBoxFor(model => model.Title, new { @class = "textboxforTitle", type = "text", id = "sessiontitle", minLength = "1", maxlength = "15" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

        }
        else if (Model.UserIsOwner && Model.OpenToEvolution)
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">


                    <input type="button" id="JoinButton" value="Connect" />

                    <input type="submit" id="SaveButton" value="Save and Quit Session" class="btn btn-default" />

                    <a href="~/Home/About">
                        <input type="button" id="QuitButton" value="Quit" />
                    </a>

                    <a href="~/Session/Index">
                        <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
                    </a>

                    <!---Title-->

                    <span class="senkenDescriptions">Title: </span>
                    @Html.TextBoxFor(model => model.Title, new { @class = "textboxforTitle", type = "text", id = "sessiontitle", minLength = "1", maxlength = "15" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })

                </div>
            </div>

        } 
        else if (!Model.UserIsOwner && Model.OpenToEvolution)
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    
                  
                    <input type="button" id="JoinButton" value="Connect" />
                    
                    <input type="submit" id="SaveButton" value="Save and Quit Session" class="btn btn-default" />

                    <a href="~/Home/About">
                        <input type="button" id="QuitButton" value="Quit" />
                    </a>

                    <a href="~/Session/Index">
                        <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
                    </a>

                    <!---Title-->

                    <span class="senkenDescriptions">Title: </span>
                    @Html.TextBoxFor(model => model.Title, new { @class = "textboxforTitle", type = "text", id = "sessiontitle", minLength = "1", maxlength = "15" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })

                </div>
            </div>

        }
        else
        {
            <span>You are in listening mode</span>
            <a href="~/Home/About">
                <input type="button" id="QuitButton" value="Quit" />
            </a>

            <a href="~/Session/Index">
                <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
            </a>

            <!---Title-->

    <span class="senkenDescriptions">Title: </span>
    @Html.TextBoxFor(model => model.Title, new { @class = "textboxforTitle", type = "text", id = "sessiontitle", minLength = "1", maxlength = "15" })
    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })

        }



        
                

        <hr />  <!-- BreakLine I -->
        <!-- Visualiser-->

       
            <canvas id="oscIVisualiser" width="500" height="100"></canvas>
        



        <hr />  <!-- BreakLine II -->

        <div id="masterControls">

            <input type="button" id="playButton" value="Activate">
            <input type="button" id="stopButton" value="Pauze">

            <span class="senkenDescriptions">Allow evolution through others? </span>

            @Html.CheckBoxFor(model => model.OpenToEvolution, "OpenToEvolution")

            <!---MasterGain-->
            <span class="senkenDescriptionsUnit">Volume: </span>

            <span class="senkenDescriptions"> </span>
            @Html.TextBoxFor(model => model.MasterGain, new { type = "range", id = "masterGain", min = "0", max = "65", step = "1" })
            <span class="senkenDescriptions"> </span>
            @Html.ValidationMessageFor(model => model.MasterGain, "", new { @class = "text-danger" })


            
        </div>

        <hr /> <!-- BreakLine III -->

        <!---Compressor-->

        <div id="compressor" class="waveBucketUnit">

            <span class="senkenDescriptionsUnit">Compressor: </span>

            <span class="senkenDescriptions">Ratio: 0&nbsp; </span>
            @Html.TextBoxFor(model => model.CompressorRatio, new { type = "range", id = "compRatio", min = "0", max = "20", step = "1" })
            <span class="senkenDescriptions">20 &nbsp;&nbsp;&nbsp;</span>
            @Html.ValidationMessageFor(model => model.CompressorRatio, "", new { @class = "text-danger" })


            <span class="senkenDescriptions">Knee: 0&nbsp; </span>
            @Html.TextBoxFor(model => model.CompressorKnee, new { type = "range", id = "compKnee", min = "0", max = "40", step = "1" })
            <span class="senkenDescriptions">40 &nbsp;&nbsp;&nbsp;</span>
            @Html.ValidationMessageFor(model => model.CompressorKnee, "", new { @class = "text-danger" })

            <span class="senkenDescriptions">Threshold: -30&nbsp; </span>
            @Html.TextBoxFor(model => model.CompressorThreshold, new { type = "range", id = "compThreshold", min = "-30", max = "0", step = "1" })
            <span class="senkenDescriptions">0 &nbsp;&nbsp;&nbsp;</span>
            @Html.ValidationMessageFor(model => model.CompressorThreshold, "", new { @class = "text-danger" })


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        </div>













        <hr />
    </div>

      <!-- BreakLine III -->

    <div class="senkenContainer" ng-app="WaveBucket" ng-controller="MyCtrl">

        <!---LEFT COLUMN: Oscillator I-->

        <div id="senkenLeftColumn">

            <!---Oscillator-->
            <div id="oscIDiv" class="waveBucketUnit">

                <div class="form-group">


                    <div class="col-md-10">

                        <h4>Oscillator I </h4>
                        <br />

                        <span class="senkenDescriptions">frequency: </span>
                        @Html.TextBoxFor(model => model.OscIFrequency, new { @class = "textboxforBig", type = "number", id = "OscIFrequency", name = "frequency", min = "0", max = "22000", step = "1", maxlength = "5" })
                        @Html.ValidationMessageFor(model => model.OscIFrequency, "", new { @class = "text-danger" })

                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.OscIType, htmlAttributes: new { id = "oscIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OscIType, "", new { @class = "text-danger" })

                        <br />
                        <input type="button" id="oscStartButtonI" name="sineGen" value="stack Oscillation">
                        <input type="button" id="oscStopButtonI" name="sineStop" value="remove Last Oscillation">


                    </div>
                </div>
            </div>


            <br>


            <!---WaveBucket-->

            <div id="wavebucketIDiv" class="waveBucketUnit">

                <h4>WaveBucket </h4>
                <br />

                <span class="senkenDescriptions">
                    <ul id="bucketlistI" class="stackList">
                        <li>*-- empty --#</li>
                    </ul>
                </span>

                @Html.HiddenFor(model => model.hiddenWaveBucketI, "hiddenWaveBucketI")


            </div>

            <br />

            <!---FilterI -->

            <div id="FilterIaDiv" class="waveBucketUnit">

                <div class="form-group">

                    <div class="col-md-10">

                        <h4>BiquadFilter I </h4>
                        <br />

                        <span class="senkenDescriptions">Type: </span>
                        @Html.EnumDropDownListFor(model => model.BiquadFilterTypeOne, htmlAttributes: new { id = "filterTypeOne", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterTypeOne, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Hz</span>
                        @Html.TextBoxFor(model => model.BiquadFilterFrequencyOne, new { type = "range", id = "filterFrequencyOne", min = "0", max = "20000", step = "1", ng_model="filterIFreqValue" })

                        <span class="senkenDescriptions">{{filterIFreqValue}} </span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterFrequencyOne, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Q</span>
                        @Html.TextBoxFor(model => model.BiquadFilterQOne, new { type = "range", id = "filterQOne", min = "0", max = "5", step = "1", ng_model="filterIQValue" })

                        <span class="senkenDescriptions">{{filterIQValue}}</span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterQOne, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">A</span>
                        @Html.TextBoxFor(model => model.BiquadFilterGainOne, new { type = "range", id = "filterGainOne", min = "-40", max = "40", step = "1", ng_model="filterIAmpValue" })
                        <span class="senkenDescriptions">{{filterIAmpValue}} </span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterGainOne, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            

            <br>

            <!---DelayI -->

            <div id="DelayIDiv" class="waveBucketUnit">

                <div class="form-group">

                    <div class="col-md-10">

                        <h4>Delay I </h4>
                        <br />


                        <span class="senkenDescriptions">Delay(ms)</span>
                        @Html.TextBoxFor(model => model.DelayITime, new { type = "range", id = "delayITime", min = "0", max = "10000", step = "1", ng_model="delayIMsValue" })
                        <span class="senkenDescriptions">{{delayIMsValue}} </span>
                        @Html.ValidationMessageFor(model => model.DelayITime, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Dry/Wet (%)</span>
                        @Html.TextBoxFor(model => model.DelayIDryWet, new { type = "range", id = "delayIDryWet", min = "0", max = "100", step = "1", ng_model="delayIDryWetValue" })
                        <span class="senkenDescriptions">{{delayIDryWetValue}}</span>
                        @Html.ValidationMessageFor(model => model.DelayIDryWet, "", new { @class = "text-danger" })
                        <br />

                  

                    </div>
                </div>
            </div>

            <br />

            <!---LFO -->

            <div id="lfoIDiv" class="waveBucketUnit">


                <div class="form-group">

                    <div class="col-md-10">

                        <h4>Lfo I (gain) </h4>
                        <br />

                        <span class="senkenDescriptions">on/off: </span>

                        @Html.CheckBoxFor(model => model.LfoIActive, "LfoIActive")
                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.LfoIType, htmlAttributes: new { id = "LfoIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LfoIType, "", new { @class = "text-danger" })


                        <br />

                        <span class="senkenDescriptions">Hz:</span>
                        @Html.TextBoxFor(model => model.LfoIFrequency, new { type = "range", id = "LfoIFrequency", min = "1", max = "50", step = "1", ng_model="lfoIFreqValue" })

                        <span class="senkenDescriptions">{{lfoIFreqValue}} </span>
                        @Html.ValidationMessageFor(model => model.LfoIFrequency, "", new { @class = "text-danger" })
                        <br />

                                               

                        <span class="senkenDescriptions">A:</span>
                        @Html.TextBoxFor(model => model.LfoIScale, new { type = "range", id = "LfoIScale", min = "1", max = "10", step = "1", ng_model="lfoIAmpValue"  })
                        <span class="senkenDescriptions">{{lfoIAmpValue}} </span>
                        @Html.ValidationMessageFor(model => model.LfoIScale, "", new { @class = "text-danger" })
                        <br />

                    </div>

                </div>
            </div>

            <br />



            <br>






        </div>

        <!---RIGHT COLUMN: OscillatorII-->


        <div id="senkenRightColumn">

            <!---OscillatorII-->
            <div id="oscIIDiv" class="waveBucketUnit">
                <div class="form-group">


                    <div class="col-md-10">

                        <h4>Oscillator II </h4>
                        <br />

                        <span class="senkenDescriptions">frequency: </span>
                        @Html.TextBoxFor(model => model.OscIIFrequency, new { @class = "textboxforBig", type = "number", id = "OscIIFrequency", name = "frequency", min = "0", max = "22000", step = "1", maxlength = "5" })
                        @Html.ValidationMessageFor(model => model.OscIIFrequency, "", new { @class = "text-danger" })

                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.OscIIType, htmlAttributes: new { id = "oscIIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OscIIType, "", new { @class = "text-danger" })

                        <br />
                        <input type="button" id="oscStartButtonII" name="sineGen" value="stack Oscillation">
                        <input type="button" id="oscStopButtonII" name="sineStop" value="remove Last Oscillation">


                    </div>
                </div>
            </div>


            <br>

            <!---WaveBucket-->

            <div id="wavebucketIIDiv" class="waveBucketUnit">

                <h4>WaveBucket </h4>
                <br />

                <span class="senkenDescriptions">
                    <ul id="bucketlistII" class="stackList">
                        <li>*-- empty --#</li>
                    </ul>
                </span>

                @Html.HiddenFor(model => model.hiddenWaveBucketII, "hiddenWaveBucketII")


            </div>

            <br />

            <!---FilterII -->

            <div id="FilterIbDiv" class="waveBucketUnit">

                <div class="form-group">

                    <div class="col-md-10">

                        <h4>BiquadFilter II </h4>
                        <br />

                        <span class="senkenDescriptions">Type: </span>
                        @Html.EnumDropDownListFor(model => model.BiquadFilterTypeTwo, htmlAttributes: new { id = "filterTypeTwo", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BiquadFilterTypeTwo, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Hz</span>
                        @Html.TextBoxFor(model => model.BiquadFilterFrequencyTwo, new { type = "range", id = "filterFrequencyTwo", min = "0", max = "20000", step = "1", ng_model="filterIIFreqValue" })
                        <span class="senkenDescriptions">{{filterIIFreqValue}} </span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterFrequencyTwo, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Q</span>
                        @Html.TextBoxFor(model => model.BiquadFilterQTwo, new { type = "range", id = "filterQTwo", min = "0", max = "5", step = "1", ng_model="filterIIQValue" })
                        <span class="senkenDescriptions">{{filterIIQValue}} </span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterQTwo, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">A</span>
                        @Html.TextBoxFor(model => model.BiquadFilterGainTwo, new { type = "range", id = "filterGainTwo", min = "-40", max = "40", step = "1", ng_model="filterIIAmpValue" })
                        <span class="senkenDescriptions">{{filterIIAmpValue}} </span>
                        @Html.ValidationMessageFor(model => model.BiquadFilterGainTwo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

           

            <br>

            <!---DelayII -->

            <div id="DelayIIDiv" class="waveBucketUnit">

                <div class="form-group">

                    <div class="col-md-10">

                        <h4>Delay II </h4>
                        <br />


                        <span class="senkenDescriptions">Delay(ms)</span>
                        @Html.TextBoxFor(model => model.DelayIITime, new { type = "range", id = "delayIITime", min = "0", max = "10000", step = "1", ng_model="delayIIMsValue" })
                        <span class="senkenDescriptions">{{delayIIMsValue}} </span>
                        @Html.ValidationMessageFor(model => model.DelayIITime, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">Dry/Wet (%):&nbsp;&nbsp;&nbsp;&nbsp;0</span>
                        @Html.TextBoxFor(model => model.DelayIIDryWet, new { type = "range", id = "delayIIDryWet", min = "0", max = "100", step = "1", ng_model="delayIIDryWetValue"})
                        <span class="senkenDescriptions">{{delayIIDryWetValue}}</span>
                        @Html.ValidationMessageFor(model => model.DelayIIDryWet, "", new { @class = "text-danger" })
                        <br />

                     



                    </div>
                </div>
            </div>

            <br />

            <!---LFOII -->

            <div id="lfoIIDiv" class="waveBucketUnit">


                <div class="form-group">

                    <div class="col-md-10">

                        <h4>Lfo I (gain) </h4>
                        <br />

                        <span class="senkenDescriptions">on/off: </span>

                        @Html.CheckBoxFor(model => model.LfoIIActive, "LfoIIActive")
                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.LfoIIType, htmlAttributes: new { id = "LfoIIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LfoIIType, "", new { @class = "text-danger" })


                        <br />

                        <span class="senkenDescriptions">Hz</span>
                        @Html.TextBoxFor(model => model.LfoIIFrequency, new { type = "range", id = "LfoIIFrequency", min = "1", max = "50", step = "1", ng_model="lfoIIFreqValue"})
                        <span class="senkenDescriptions">{{lfoIIFreqValue}} </span>
                        @Html.ValidationMessageFor(model => model.LfoIIFrequency, "", new { @class = "text-danger" })
                        <br />

                        <span class="senkenDescriptions">A</span>
                        @Html.TextBoxFor(model => model.LfoIIScale, new { type = "range", id = "LfoIIScale", min = "1", max = "10", step = "1", ng_model="lfoIIAmpValue" })
                        <span class="senkenDescriptions">{{lfoIIAmpValue}} </span>
                        @Html.ValidationMessageFor(model => model.LfoIIScale, "", new { @class = "text-danger" })
                        <br />

                       

                    </div>

                </div>
            </div>

            <br>





            <br>







        </div>



    </div>




}




@section Scripts {

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>

<script>

    /* first values are loaded from the controller and then parsed to angular framework */

    // wavebucket I

    //lfo
    var lfoIFreqValueController = @Html.Raw(Json.Encode(Model.LfoIFrequency));
    var lfoIAmpValueController = @Html.Raw(Json.Encode(Model.LfoIFrequency));

    // filter
    var filterIFreqValueController = @Html.Raw(Json.Encode(Model.BiquadFilterFrequencyOne));
    var filterIQValueController = @Html.Raw(Json.Encode(Model.BiquadFilterQOne));
    var filterIAmpValueController = @Html.Raw(Json.Encode(Model.BiquadFilterGainOne));

    // delay
    var delayIMsValueController = @Html.Raw(Json.Encode(Model.DelayITime));
    var delayIDryWetValueController = @Html.Raw(Json.Encode(Model.DelayIDryWet));


    // wavebucket I

    //lfo
    var lfoIIFreqValueController = @Html.Raw(Json.Encode(Model.LfoIIFrequency));
    var lfoIAmpValueController = @Html.Raw(Json.Encode(Model.LfoIIScale));

    // filter
    var filterIIFreqValueController = @Html.Raw(Json.Encode(Model.BiquadFilterFrequencyTwo));
    var filterIIQValueController = @Html.Raw(Json.Encode(Model.BiquadFilterQTwo));
    var filterIIAmpValueController = @Html.Raw(Json.Encode(Model.BiquadFilterGainTwo));

    // delay
    var delayIIMsValueController = @Html.Raw(Json.Encode(Model.DelayIITime));
    var delayIIDryWetValueController = @Html.Raw(Json.Encode(Model.DelayIIDryWet));


    angular.module("WaveBucket", [])
        .controller("MyCtrl", function ($scope) {

            // bucketI
            $scope.lfoIFreqValue = lfoIFreqValueController;
            $scope.lfoIAmpValue = lfoIAmpValueController;

            $scope.filterIFreqValue = filterIFreqValueController;
            $scope.filterIQValue = filterIQValueController;
            $scope.filterIAmpValue = filterIAmpValueController;

            $scope.delayIMsValue = delayIMsValueController;
            $scope.delayIDryWetValue = delayIDryWetValueController;

            // bucketII
            $scope.lfoIIFreqValue = lfoIIFreqValueController;
            $scope.lfoIIAmpValue = lfoIAmpValueController;

            $scope.filterIIFreqValue = filterIIFreqValueController;
            $scope.filterIIQValue = filterIIQValueController;
            $scope.filterIIAmpValue = filterIIAmpValueController;

            $scope.delayIIMsValue = delayIIMsValueController;
            $scope.delayIIDryWetValue = delayIIDryWetValueController;
        })

</script>



<script type="text/javascript" src="~/Scripts/app/senkenDelay.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenBiquadFilter.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenCompressor.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenMasterController.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenVisualAnalyser.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenLfo.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenWaveBucket.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenOscillator.js"></script>
<script type="text/javascript" src="~/Scripts/app/hub.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenSynth.js"></script>



