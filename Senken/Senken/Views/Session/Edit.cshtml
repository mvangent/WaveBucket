@model Senken.Models.Session

@{
    ViewBag.Title = "Edit";
}

<h2>Session Mode</h2>

@using (Html.BeginForm()) 
{ 
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        <!---SaveButton & CopyButton-->
        @if (Model.UserIsOwner)
        {

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save & Quit" class="btn btn-default" />

                    <a href="~/Home/About">
                        <input type="button" id="QuitButton" value="Quit" />

                        <a href="~/Session/Index">
                            <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
                        </a>
                    </a>
                </div>
            </div>

        }
        else if (!Model.UserIsOwner && Model.OpenToEvolution)
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Acquire Session" class="btn btn-default" />

                    <a href="~/Home/About">
                        <input type="button" id="QuitButton" value="Quit" />
                    </a>

                    <a href="~/Session/Index">
                        <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
                    </a>

                </div>
            </div>

        }
        else
        {
            <span>You are in listening mode</span>
            <a href="~/Home/About">
                <input type="button" id="QuitButton" value="Quit" />
            </a>

            <a href="~/Session/Index">
                <input type="button" id="ExploreAgainButton" value="Explore Sessions" />
            </a>
        }



        





        <hr />  <!-- BreakLine I -->
        <!-- Visualiser-->

        <div id="visualiserDiv">
            <canvas id="oscIVisualiser" width="500" height="100"></canvas>
        </div>



        <hr />  <!-- BreakLine II -->


        <input type="button" id="playButton" value="Activate">
        <input type="button" id="stopButton" value="Pauze">

        <span class="senkenDescriptions">Allow evolution through others? </span>

        @Html.CheckBoxFor(model => model.OpenToEvolution, "OpenToEvolution")

        <!---MasterGain-->
        <span class="senkenDescriptionsUnit">Volume: </span>



        @Html.TextBoxFor(model => model.MasterGain, new { @class = "textboxforStandard", type = "number", id = "masterGain", name = "masterGainField", min = "0", max = "100", step = "1", value = "50", size = "3", maxlength = "3" })
        @Html.ValidationMessageFor(model => model.MasterGain, "", new { @class = "text-danger" })

        <!---Compressor-->

        <span class="senkenDescriptionsUnit">Compressor: </span>

        <span class="senkenDescriptions">Ratio: </span>
        @Html.TextBoxFor(model => model.CompressorRatio, new { @class = "textboxforStandard", type = "number", id = "compRatio", name = "compressorRatio", min = "1", max = "20", step = "1", value = "12" })
        @Html.ValidationMessageFor(model => model.CompressorRatio, "", new { @class = "text-danger" })

        <span class="senkenDescriptions">Knee: </span>

        @Html.TextBoxFor(model => model.CompressorKnee, new { @class = "textboxforStandard", type = "number", id = "compKnee", name = "compressorKnee", min = "0", max = "40", step = "1", value = "30", size = "2", maxlength = "2" })
        @Html.ValidationMessageFor(model => model.CompressorKnee, "", new { @class = "text-danger" })

        <span class="senkenDescriptions">Threshold: </span>
        @Html.TextBoxFor(model => model.CompressorThreshold, new { @class = "textboxforStandard", type = "number", id = "compThreshold", name = "compressorThreshold", min = "-100", max = "0", step = "1", value = "-23", size = "3", maxlength = "3" })
        @Html.ValidationMessageFor(model => model.CompressorThreshold, "", new { @class = "text-danger" })

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })




        <hr />
    </div>

     <!-- BreakLine III -->

        <div class="senkenContainer">


            <!---LEFT COLUMN: Oscillator I-->

            <div id="senkenLeftColumn">

                <!---Oscillator-->

                <div class="form-group">


                    <div class="col-md-10">

                        <h4>Oscillator I </h4>
                        <br />

                        <span class="senkenDescriptions">frequency: </span>
                        @Html.TextBoxFor(model => model.OscIFrequency, new { @class = "textboxforBig", type = "number", id = "OscIFrequency", name = "frequency", min = "1", max = "22000", step = "1", maxlength = "5" })
                        @Html.ValidationMessageFor(model => model.OscIFrequency, "", new { @class = "text-danger" })

                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.OscIType, htmlAttributes: new { id = "oscIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OscIType, "", new { @class = "text-danger" })

                        <br />
                        <input type="button" id="sineButton" name="sineGen" value="stack Oscillation">
                        <input type="button" id="sineStopButton" name="sineStop" value="remove Last Oscillation">


                    </div>
                </div>


                <br>

                <!---LFO -->

                <div id="lfoIDiv">


                    <div class="form-group">

                        <div class="col-md-10">

                            <h4>Lfo I (gain) </h4>
                            <br />

                            <span class="senkenDescriptions">on/off: </span>

                            @Html.CheckBoxFor(model => model.LFOIActive, "LFOIActive")

                            <span class="senkenDescriptions">frequency: </span>

                            @Html.TextBoxFor(model => model.LFOIFrequency, new { @class = "textboxforStandard", type = "number", id = "LFOIFreq", name = "lfoFrequency", min = "0.1", max = "50", step = "0.1", maxlength = "4" })
                            @Html.ValidationMessageFor(model => model.LFOIFrequency, "", new { @class = "text-danger" })



                            <span class="senkenDescriptions">scale: </span>

                            @Html.TextBoxFor(model => model.LFOIScale, new { @class = "textboxforStandard", type = "number", id = "LFOIScale", name = "lfoScale", min = "0.1", max = "10", step = "1", value = "0.1", maxlength = "4" })
                            @Html.ValidationMessageFor(model => model.LFOIScale, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">type: </span>

                            @Html.EnumDropDownListFor(model => model.LFOIType, htmlAttributes: new { id = "lfoIType", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LFOIType, "", new { @class = "text-danger" })


                        </div>
                    </div>

                </div>

                <br>

                

                <!---FilterI -->

                <div id="FilterIaDiv">

                    <div class="form-group">

                        <div class="col-md-10">

                            <h4>BiquadFilter I </h4>
                            <br />

                            <span class="senkenDescriptions">type: </span>
                            @Html.EnumDropDownListFor(model => model.BiquadFilterTypeOne, htmlAttributes: new { id = "filterTypeOne", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterTypeOne, "", new { @class = "text-danger" })


                            <span class="senkenDescriptions">frequency: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterFrequencyOne, new { @class = "textboxforBig", type = "number", id = "filterFrequencyOne", min = "1", max = "22000", step = "1", value = "3", maxlength = "5" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterFrequencyOne, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">Q: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterQOne, new { @class = "textboxforStandard", type = "number", id = "filterQOne", min = "1", max = "1000", step = "1", value = "1", maxlength = "1" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterQOne, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">Gain: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterGainOne, new { @class = "textboxforStandard", type = "number", id = "filterGainOne", min = "-40", max = "40", step = "1", value = "1", maxlength = "1" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterGainOne, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <br>


                <!---WaveBucket-->

                <div id="wavebucketIDiv">

                    <h4>WaveBucket </h4>
                    <br />

                    <span class="senkenDescriptions">
                        <ul id="bucketlist">
                            <li>*-- empty --#</li>
                        </ul>
                    </span>

                    @Html.HiddenFor(model => model.hiddenWaveBucketI, "hiddenWaveBucketI");


                </div>




            </div>

            <!---RIGHT COLUMN: OscillatorII-->


            <div id="senkenRightColumn">

                <!---Oscillator-->

                <div class="form-group">


                    <div class="col-md-10">

                        <h4>Oscillator II </h4>
                        <br />

                        <span class="senkenDescriptions">frequency: </span>
                        @Html.TextBoxFor(model => model.OscIIFrequency, new { @class = "textboxforBig", type = "OscIIFrequency", id = "sineFreq", name = "frequency", min = "1", max = "22000", step = "1", maxlength = "5" })
                        @Html.ValidationMessageFor(model => model.OscIIFrequency, "", new { @class = "text-danger" })

                        <span class="senkenDescriptions">type: </span>

                        @Html.EnumDropDownListFor(model => model.OscIIType, htmlAttributes: new { id = "oscIIType", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OscIIType, "", new { @class = "text-danger" })

                        <br />
                        <input type="button" id="sineButton" name="sineGen" value="stack Oscillation">
                        <input type="button" id="sineStopButton" name="sineStop" value="remove Last Oscillation">


                    </div>
                </div>


                <br>

                <!---LFO -->

                <div id="lfoIIaDiv">


                    <div class="form-group">

                        <div class="col-md-10">

                            <h4>Lfo I (gain) </h4>
                            <br />

                            <span class="senkenDescriptions">on/off: </span>

                            @Html.CheckBoxFor(model => model.LFOIIActive, "LFOIIActive")

                            <span class="senkenDescriptions">frequency: </span>

                            @Html.TextBoxFor(model => model.LFOIIFrequency, new { @class = "textboxforStandard", type = "number", id = "LFOIIFreq", name = "lfoFrequency", min = "0.1", max = "50", step = "0.1", maxlength = "4" })
                            @Html.ValidationMessageFor(model => model.LFOIFrequency, "", new { @class = "text-danger" })



                            <span class="senkenDescriptions">scale: </span>

                            @Html.TextBoxFor(model => model.LFOIIScale, new { @class = "textboxforStandard", type = "number", id = "LFOIIScale", name = "lfoScale", min = "0.1", max = "10", step = "1", value = "0.1", maxlength = "4" })
                            @Html.ValidationMessageFor(model => model.LFOIScale, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">type: </span>

                            @Html.EnumDropDownListFor(model => model.LFOIIType, htmlAttributes: new { id = "lfoIIType", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LFOIType, "", new { @class = "text-danger" })


                        </div>
                    </div>

                </div>

                <br>



                <!---FilterI -->

                <div id="FilterIIaDiv">

                    <div class="form-group">

                        <div class="col-md-10">

                            <h4>BiquadFilter I </h4>
                            <br />

                            <span class="senkenDescriptions">type: </span>
                            @Html.EnumDropDownListFor(model => model.BiquadFilterTypeTwo, htmlAttributes: new { id = "filterTypeTwo", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterTypeOne, "", new { @class = "text-danger" })


                            <span class="senkenDescriptions">frequency: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterFrequencyTwo, new { @class = "textboxforBig", type = "number", id = "filterFrequencyTwo", min = "1", max = "22000", step = "1", value = "3", maxlength = "5" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterFrequencyOne, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">Q: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterQTwo, new { @class = "textboxforStandard", type = "number", id = "filterQTwo", min = "1", max = "1000", step = "1", value = "1", maxlength = "1" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterQOne, "", new { @class = "text-danger" })

                            <span class="senkenDescriptions">Gain: </span>
                            @Html.TextBoxFor(model => model.BiquadFilterGainTwo, new { @class = "textboxforStandard", type = "number", id = "filterGainTwo", min = "-40", max = "40", step = "1", value = "1", maxlength = "1" })
                            @Html.ValidationMessageFor(model => model.BiquadFilterGainOne, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <br>

                <!---WaveBucket-->

                <div id="wavebucketIIDiv">

                    <h4>WaveBucket </h4>
                    <br />

                    <span class="senkenDescriptions">
                        <ul id="bucketlist">
                            <li>*-- empty --#</li>
                        </ul>
                    </span>

                    @Html.HiddenFor(model => model.hiddenWaveBucketII, "hiddenWaveBucketII");


                </div>




            </div>






        </div>

}




@section Scripts {

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>


<script type="text/javascript" src="~/Scripts/app/senkenBiquadFilter.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenCompressor.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenMasterController.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenVisualAnalyser.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenLfo.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenWaveBucket.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenOscillator.js"></script>
<script type="text/javascript" src="~/Scripts/app/senkenSynth.js"></script>

<script type="text/javascript" src="~/Scripts/app/hub.js">

</script>
